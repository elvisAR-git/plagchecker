'use strict';

var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var autopopulate = require('mongoose-autopopulate');

var schemaOptions = {
    toObject: { virtuals: true },
    toJSON: { virtuals: true },
    timestamps: {createdAt: 'create_date', updatedAt: 'last_updated'}
};
const status = Object.freeze({
    pending: "pending",
    inVerify: "inVerify",
    approve: "approve",
    reject: "reject",
    payout: "payout",
    close: "close"
});
var claimSchema = new Schema({
    saas_id:{type: Schema.Types.ObjectId, ref: 'Saas', autopopulate:true}, // SaaS ID is 0 if its belongs BISMART
    user_id:{type: Schema.Types.ObjectId, ref: 'User', autopopulate:true},
    company_id:{type: Schema.Types.ObjectId, ref: 'InsuranceCompany', autopopulate:true},
    product_id:{type: Schema.Types.ObjectId, ref: 'Product', autopopulate:true},
    product_package_id:{type: Schema.Types.ObjectId, ref: 'saas_product_package', autopopulate:true},
    product_name:{type: String, default: ""},
    policy_number:{type: String, default: ""},
    documents:{type: Array, default: [] },
    claim_amount:{type: Number, default: 0},
    claim_proposal_message:{type: String, default: ""},
    description:{type: String, default: ""},
    statusDocument:{type: String, default: "" },
    status: { type: String,enum: Object.values(status), default: 'pending' },
    is_deleted: { type: Boolean, default: false },
}, schemaOptions);

claimSchema.plugin(autopopulate);

claimSchema.pre('save', function (next) { this.last_updated = new Date(); if (!this.isNew) { return next(); } next(); });

module.exports = mongoose.model('claim', claimSchema);	
