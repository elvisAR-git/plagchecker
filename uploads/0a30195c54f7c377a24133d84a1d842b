"use strict";

var mongoose = require("mongoose");
var Schema = mongoose.Schema;
var autopopulate = require("mongoose-autopopulate");

var schemaOptions = {
  toObject: { virtuals: true },
  toJSON: { virtuals: true },
  timestamps: { createdAt: "create_date", updatedAt: "last_updated" },
};
const orderStatus = Object.freeze({
  pending: "pending",
  cancelled: "cancelled",
  confirmed: "confirmed",
});
const kycStatus = Object.freeze({
  pending: "pending", //false, default
  process: "process", //with true
  rejected: "rejected", //admin side
  approve: "approve", //admin side
});

var orderSchema = new Schema(
  {
    saas_id: { type: Schema.Types.ObjectId, ref: "Saas", autopopulate: true },
    user_id: { type: Schema.Types.ObjectId, ref: "User", autopopulate: true },
    package_id: {
      type: Schema.Types.ObjectId,
      ref: "saas_product_package",
      autopopulate: true,
    },
    product_id: {
      type: Schema.Types.ObjectId,
      ref: "Product",
      autopopulate: true,
    },
    category_id: {
      type: Schema.Types.ObjectId,
      ref: "ProductCategory",
      autopopulate: true,
    },
    feature_id: [
      { type: Schema.Types.ObjectId, ref: "Features", autopopulate: true },
    ],
    package_amount: { type: Number, default: 0 },
    tax_amount: { type: String, default: "" }, //0.25% + 40rs
    total_amount: { type: String, default: "" }, //(package_amount + tax_amount)
    referralCode: { type: String, default: "" },
    order_status: {
      type: String,
      enum: Object.values(orderStatus),
      default: "pending",
    },
    kycStatus: {
      type: String,
      enum: Object.values(kycStatus),
      default: "pending",
    },
    policyNumber: { type: String, default: "" },
    expiryDate: { type: Date, default: null },
    is_kyc: { type: Boolean, default: false },
    is_deleted: { type: Boolean, default: false },
    reject_reason: { type: String, default: "" },
  },
  schemaOptions
);

orderSchema.plugin(autopopulate);

orderSchema.pre("save", function (next) {
  this.last_updated = new Date();
  if (!this.isNew) {
    return next();
  }
  next();
});

module.exports = mongoose.model("order", orderSchema);
